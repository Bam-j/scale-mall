<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="scale-mall Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Scale Mall - WebFlux/Redis 부하 테스트 기본 플랜</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments">
          <!-- 외부 프로퍼티 주입: __P(key, default) -->
          <elementProp name="baseUrl" elementType="Argument">
            <stringProp name="Argument.name">baseUrl</stringProp>
            <stringProp name="Argument.value">${__P(baseUrl,http://localhost:8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="purchasePath" elementType="Argument">
            <stringProp name="Argument.name">purchasePath</stringProp>
            <!-- 줄바꿈 제거 -->
            <stringProp name="Argument.value">${__P(purchasePath,/api/products/purchase)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="healthPath" elementType="Argument">
            <stringProp name="Argument.name">healthPath</stringProp>
            <stringProp name="Argument.value">${__P(healthPath,/actuator/health)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpSec" elementType="Argument">
            <stringProp name="Argument.name">rampUpSec</stringProp>
            <stringProp name="Argument.value">${__P(rampUpSec,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="durationSec" elementType="Argument">
            <stringProp name="Argument.name">durationSec</stringProp>
            <stringProp name="Argument.value">${__P(durationSec,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="csvPath" elementType="Argument">
            <stringProp name="Argument.name">csvPath</stringProp>
            <stringProp name="Argument.value">${__P(csvPath,clients.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productId" elementType="Argument">
            <stringProp name="Argument.name">productId</stringProp>
            <stringProp name="Argument.value">${__P(productId,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="quantity" elementType="Argument">
            <stringProp name="Argument.name">quantity</stringProp>
            <stringProp name="Argument.value">${__P(quantity,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="thinkTimeMs" elementType="Argument">
            <stringProp name="Argument.name">thinkTimeMs</stringProp>
            <stringProp name="Argument.value">${__P(thinkTimeMs,250)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thinkJitterMs" elementType="Argument">
            <stringProp name="Argument.name">thinkJitterMs</stringProp>
            <stringProp name="Argument.value">${__P(thinkJitterMs,150)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>

      <!-- HTTP Defaults -->
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
        <stringProp name="HTTPSampler.connect_timeout">3000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
      </ConfigTestElement>
      <hashTree/>

      <!-- 공통 헤더 -->
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>

      <!-- CSV Data Set: clientId 1열 사용 / 재사용 금지 -->
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set (clientId)" enabled="true">
        <stringProp name="filename">${csvPath}</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">clientId</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>

      <!-- Thread Group: Scheduler 사용 -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users - Purchase Load" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpSec}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${durationSec}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>

        <!-- (한번만) 헬스 체크 -->
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once: Health Check" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ${healthPath}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.path">${__groovy(vars.get('healthPath')?.trim())}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: 200 OK (health)" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49547">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>

        <!-- Think Time -->
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time (uniform)" enabled="true">
          <stringProp name="ConstantTimer.delay">${thinkTimeMs}</stringProp>
          <stringProp name="RandomTimer.range">${thinkJitterMs}</stringProp>
        </UniformRandomTimer>
        <hashTree/>

        <!-- 구매 요청 -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST ${purchasePath}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="body" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <!-- JSON Body: clientId trim, productId/quantity 정수 보정 -->
                <stringProp name="Argument.value">
                  {
                  "clientId": "${__groovy(vars.get('clientId')?.trim())}",
                  "productId": ${__intSum(${productId},0)},
                  "quantity": ${__intSum(${quantity},0)}
                  }
                </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">${__groovy(vars.get('purchasePath')?.trim())}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: 200 or 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="code200">200</stringProp>
              <stringProp name="code201">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: body contains &quot;success&quot; (optional)" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="succ">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>

        <!-- (GUI 디버깅용) 리스너: CLI에서는 -l 사용 -->
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report (GUI only)" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time><latency>true</latency><timestamp>true</timestamp>
              <success>true</success><label>true</label><code>true</code>
              <message>false</message><threadName>false</threadName><dataType>false</dataType>
              <encoding>false</encoding><assertions>true</assertions><subresults>false</subresults>
              <responseData>false</responseData><samplerData>false</samplerData><xml>false</xml><fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders><requestHeaders>false</requestHeaders><responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage><assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes><sentBytes>true</sentBytes><url>true</url><threadCounts>true</threadCounts><idleTime>true</idleTime><connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>

      </hashTree>

      <!-- baseUrl 적용 PreProcessor -->
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Apply baseUrl to all HTTP samplers" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="script">
          import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
          def base = vars.get('baseUrl')
          if (!base) return
          def u = new java.net.URL(base)
          def proto = u.getProtocol()
          def host = u.getHost()
          def port = (u.getPort() != -1) ? u.getPort() : ("https".equalsIgnoreCase(proto) ? 443 : 80)
          def s = ctx.getCurrentSampler()
          if (s instanceof HTTPSamplerProxy) {
          s.setProtocol(proto)
          s.setDomain(host)
          s.setPort(port)
          }
        </stringProp>
      </JSR223PreProcessor>
      <hashTree/>

    </hashTree>
  </hashTree>
</jmeterTestPlan>
